import unittest
import pandas as pd
from context import macd

# Test results and outputs
class ResultsMACD(unittest.TestCase):
    # Input data
    test_data = pd.Series([25.81999969, 25.70999908, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084])

    dict_df = {'col1': [0, 0, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084], 
       'col2': [0, 25.70999908, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084],
       'close': [25.81999969, 25.70999908, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084]}

    test_data_df = pd.DataFrame(dict_df)

    # Expected output results
    results_line = pd.Series([0.00000000e+00, 2.29167938e-03, 1.76346760e-03, 1.99712347e-04,
       1.25913573e-03, 1.21560324e-04, 2.26852409e-03, 1.00507827e-03,
       2.43099317e-03, 4.84375539e-03, 8.00158938e-03, 1.27580293e-02,
       1.50394072e-02, 1.27463506e-02, 1.25160892e-02, 1.10435033e-02,
       1.15152589e-02, 8.78096529e-03, 4.17961330e-03, 5.49202155e-03,
       4.82588528e-03, 8.01030203e-03, 6.56044320e-03, 5.99969027e-03,
       3.00224577e-04, 1.84962393e-04, 2.54294247e-03, 9.00993145e-03,
       1.12268732e-02, 1.21315554e-02, 7.91051915e-03, 6.59168977e-03,
       1.72176848e-02, 2.52655799e-02, 3.88809644e-02, 4.89898038e-02,
       6.67980417e-02, 8.82999935e-02, 1.04648462e-01, 1.15368053e-01,
       1.23000708e-01, 1.30999785e-01, 1.44213037e-01, 1.41942507e-01,
       1.33386684e-01, 1.25085009e-01, 1.16360575e-01, 1.10309319e-01,
       9.62637176e-02, 8.34195698e-02, 7.16675340e-02, 6.01811715e-02,
       5.19570824e-02, 4.34562986e-02, 3.84953238e-02, 3.92768197e-02,
       4.23280830e-02, 4.49144753e-02, 4.49096520e-02, 4.65525321e-02,
       4.72584418e-02, 5.01620930e-02, 5.10707264e-02, 5.33532602e-02,
       5.22687215e-02, 5.29866823e-02, 5.21579322e-02])

    results_signal = pd.Series([0.        , 0.00127316, 0.0014741 , 0.0010424 , 0.00110687,
       0.0008398 , 0.00120137, 0.0011542 , 0.00144914, 0.00220973,
       0.00347696, 0.00547014, 0.00749533, 0.00859385, 0.0094069 ,
       0.0097437 , 0.01010618, 0.00983627, 0.0086884 , 0.00804167,
       0.00739252, 0.007517  , 0.00732455, 0.00705832, 0.00570158,
       0.00459491, 0.00418352, 0.00515067, 0.0063678 , 0.00752198,
       0.00759976, 0.00739799, 0.00936317, 0.01254527, 0.01781454,
       0.02405162, 0.03260312, 0.04374481, 0.05592757, 0.06781724,
       0.07885511, 0.08928493, 0.1002713 , 0.108606  , 0.11356235,
       0.11586696, 0.11596569, 0.11483439, 0.11112019, 0.10557999,
       0.09879742, 0.0910741 , 0.08325064, 0.07529172, 0.06793241,
       0.06220127, 0.05822662, 0.05556419, 0.05343327, 0.05205712,
       0.05109739, 0.05091033, 0.05094241, 0.05142458, 0.05159341,
       0.05187206, 0.05192924])

    # Input parameters
    slow = 24
    fast = 12
    ma = 9

    # Tests
    def test_result_macd_line(self):
        '''macd function must return macd line with values equal to expected'''
        result = macd.MACD(self.test_data, self.slow, self.fast, self.ma)
        pd.testing.assert_series_equal(self.results_line, result['macd_line'], check_names=False)

    def test_result_macd_signal(self):
        '''macd function must return macd signal with values equal to expected'''
        result = macd.MACD(self.test_data, self.slow, self.fast, self.ma)
        pd.testing.assert_series_equal(self.results_signal, result['macd_signal'], check_names=False)

    def test_result_macd_line_lenght_size(self):
        '''macd result line must have the same lenght as input'''
        result = macd.MACD(self.test_data, self.slow, self.fast, self.ma)
        self.assertEqual(self.results_line.shape[0], result.shape[0])

    def test_result_macd_signal_lenght_size(self):
        '''macd result signal must have the same lenght as input'''
        result = macd.MACD(self.test_data, self.slow, self.fast, self.ma)
        self.assertEqual(self.results_signal.shape[0], result.shape[0])

    def test_output_result_matrix_cols_number(self):
        '''macd result df must have 2 columns'''
        result = macd.MACD(self.test_data, self.slow, self.fast, self.ma)
        self.assertEqual(2, result.shape[1])

    def test_output_result_matrix_cols_number_full_if_input_series(self):
        '''macd result df must have original series plus 4'''
        result = macd.MACD(self.test_data, self.slow, self.fast, self.ma, full_output=True)
        self.assertEqual(5, result.shape[1])

    def test_output_result_matrix_cols_number_full_if_input_df(self):
        '''macd result df must have original df columns plus 4'''
        result = macd.MACD(self.test_data_df, self.slow, self.fast, self.ma, full_output=True)
        self.assertEqual((self.test_data_df.shape[1] + 4), result.shape[1])

# Test input data
class BadInputMACD(unittest.TestCase):
  test_data = pd.Series([25.81999969, 25.70999908, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084])

  test_data_list = [25.81999969, 25.70999908, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084]
  
  dict_df_no_close = {'col1': [0, 0, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084], 
       'col2': [0, 25.70999908, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084],
       'col3': [25.81999969, 25.70999908, 25.75      , 25.79999924, 25.79999924,
       25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
       25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
       25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
       25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
       25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
       25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
       25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
       25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
       25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
       25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
       25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
       25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
       25.11000061, 25.12000084]}

  dict_df_more_close = {'col1': [0, 0, 25.75      , 25.79999924, 25.79999924,
     25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
     25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
     25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
     25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
     25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
     25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
     25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
     25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
     25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
     25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
     25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
     25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
     25.11000061, 25.12000084], 
     'adj close': [0, 25.70999908, 25.75      , 25.79999924, 25.79999924,
     25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
     25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
     25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
     25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
     25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
     25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
     25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
     25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
     25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
     25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
     25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
     25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
     25.11000061, 25.12000084],
     'close': [25.81999969, 25.70999908, 25.75      , 25.79999924, 25.79999924,
     25.75      , 25.71999931, 25.78000069, 25.72999954, 25.70000076,
     25.67000008, 25.62000084, 25.63999939, 25.70999908, 25.68000031,
     25.70000076, 25.67000008, 25.71999931, 25.76000023, 25.86000061,
     25.72999954, 25.79000092, 25.72999954, 25.73999977, 25.65999985,
     25.71999931, 25.69000053, 25.62000084, 25.65999985, 25.67000008,
     25.73999977, 25.70999908, 25.54000092, 25.54000092, 25.43000031,
     25.43000031, 25.28000069, 25.15999985, 25.14999962, 25.15999985,
     25.14999962, 25.10000038, 24.97999954, 25.12999916, 25.20000076,
     25.20000076, 25.20999908, 25.18000031, 25.29000092, 25.29999924,
     25.30999947, 25.32999992, 25.30999947, 25.32999992, 25.29999924,
     25.22999954, 25.19000053, 25.18000031, 25.20000076, 25.17000008,
     25.17000008, 25.12999916, 25.13999939, 25.11000061, 25.13999939,
     25.11000061, 25.12000084]}
  
  test_data_df_no_close = pd.DataFrame(dict_df_no_close)
  test_data_df_more_close = pd.DataFrame(dict_df_more_close)

  # Input parameters
  slow = 24
  fast = 12
  ma = 9

  def test_parameter_not_int(self):
    '''all parameters must be integer type'''
    self.assertRaises(TypeError, macd.MACD, self.test_data, 15.5, 9, 5)

  def test_input_data_not_series_or_df(self):
    '''input data must be a pd.DataFrame or pd.Series'''
    self.assertRaises(TypeError, macd.MACD, self.test_data_list, self.slow, self.fast, self.ma)

  def test_slow_is_less_than_fast(self):
    '''slow parameter must be greater than fast'''
    self.assertRaises(ValueError, macd.MACD, self.test_data, 12, 24, self.ma)

  def test_df_no_close_column(self):
    '''pd.DataFrame as input must have close column'''
    self.assertRaises(IndexError, macd.MACD, self.test_data_df_no_close, self.slow, self.fast, self.ma)

  def test_df_more_than_one_close_column(self):
    '''pd.DataFrame as input must have only one close column'''
    self.assertRaises(KeyError, macd.MACD, self.test_data_df_more_close, self.slow, self.fast, self.ma)

if __name__ == '__main__':
    unittest.main()